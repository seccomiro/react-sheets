{"version":3,"sources":["components/Cell.js","actions/index.js","actions/types.js","logic/cell.js","components/Sheet.js","history.js","components/App.js","logic/formula.js","logic/Cell.js","reducers/sheetReducer.js","logic/Sheet.js","reducers/index.js","store.js","index.js"],"names":["Cell","onChange","e","props","updateEditingCell","target","value","onSelectCell","selectCell","name","onKeyDown","which","nextElement","type","preventDefault","updateCell","onBlur","this","selectedCell","className","onFocus","select","tempFormula","autoFocus","onClick","cell","React","Component","connect","state","ownProps","sheet","findCell","cellName","formula","payload","selected","nextColumn","nextRow","letters","indexToColumn","i","indexToRow","indexToCell","iRow","iColumn","cellToIndex","row","parseInt","column","indexOf","toUpperCase","Sheet","style","textAlign","cells","map","cellName1","cellName2","key","getName","j","renderCells","createBrowserHistory","App","history","path","exact","component","operators","isCell","isNumber","match","isNaN","listeners","Set","pointedCells","cellNames","presentCells","split","filter","trim","register","evaluate","add","getCellName","params","startsWith","substring","length","pointedCellParams","forEach","Object","keys","INITIAL_STATE","rows","columns","Map","createCells","pointingCell","pointedCellNames","registerListener","cellMap","index","setFormula","rowCount","columnCount","set","get","undefined","combineReducers","action","update","$set","nextColumnName","nextColumnFormula","nextRowName","nextRowFormula","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.80f1d3f5.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  updateCell,\n  updateEditingCell,\n  selectCell,\n  nextColumn,\n  nextRow,\n} from '../actions';\n\nclass Cell extends React.Component {\n  onChange = e => {\n    this.props.updateEditingCell(e.target.value);\n  };\n\n  onSelectCell = e => {\n    this.props.selectCell(this.props.name, true);\n  };\n\n  onKeyDown = e => {\n    if (e.which === 9) this.nextElement('Column', e);\n    else if (e.which === 13) this.nextElement('Row', e);\n  };\n\n  nextElement = (type, e) => {\n    e.preventDefault();\n    this.props.updateCell(this.props.name, e.target.value);\n    this.props[`next${type}`]();\n  };\n\n  onBlur = e => {\n    this.props.updateCell(this.props.name, e.target.value);\n  };\n\n  render() {\n    if (\n      this.props.selectedCell &&\n      this.props.selectedCell.name === this.props.name\n    ) {\n      return (\n        <div className=\"cell selected\">\n          <input  className=\"test\"\n            onKeyDown={this.onKeyDown}\n            onChange={this.onChange}\n            onFocus={e => e.target.select()}\n            onBlur={this.onBlur}\n            type=\"text\"\n            value={this.props.selectedCell.tempFormula}\n            autoFocus\n          />\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"cell\" onClick={this.onSelectCell}>\n          <div className=\"test\">{this.props.cell.value || '\\u00A0'}</div>\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const cell = state.sheet.sheet.findCell(ownProps.name);\n  return { selectedCell: state.sheet.selectedCell, cell };\n};\n\nexport default connect(mapStateToProps, {\n  updateCell,\n  updateEditingCell,\n  selectCell,\n  nextColumn,\n  nextRow,\n})(Cell);\n","import {\n  UPDATE_CELL,\n  SELECT_CELL,\n  NEXT_ROW,\n  NEXT_COLUMN,\n  UPDATE_EDITING_CELL,\n} from './types';\n\nexport const updateCell = (cellName, formula) => {\n  return { type: UPDATE_CELL, payload: { cellName, formula } };\n};\n\nexport const updateEditingCell = value => {\n  return { type: UPDATE_EDITING_CELL, payload: value };\n};\n\nexport const selectCell = (name, selected) => {\n  return { type: SELECT_CELL, payload: { name, selected } };\n};\n\nexport const nextRow = () => {\n  return { type: NEXT_ROW };\n};\n\nexport const nextColumn = () => {\n  return { type: NEXT_COLUMN };\n};\n","export const UPDATE_CELL = 'UPDATE_CELL';\nexport const UPDATE_EDITING_CELL = 'UPDATE_EDITING_CELL';\nexport const SELECT_CELL = 'SELECT_CELL';\nexport const NEXT_ROW = 'NEXT_ROW';\nexport const NEXT_COLUMN = 'NEXT_COLUMN';\n","const letters = [\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n];\n\nexport const indexToColumn = i => letters[i];\n\nexport const columnToIndex = column => letters.indexOf(column.toUpperCase());\n\nexport const rowToIndex = row => parseInt(row) - 1;\n\nexport const indexToRow = i => i + 1;\n\nexport const indexToCell = (iRow, iColumn) =>\n  `${indexToColumn(iColumn)}${indexToRow(iRow)}`;\n\nexport const cellToIndex = cell => ({\n  row: rowToIndex(cell[1]),\n  column: columnToIndex(cell[0]),\n});\n\nexport const sameRow = (cellName1, cellName2) =>\n  cellName1 &&\n  cellName2 &&\n  cellToIndex(cellName1).row === cellToIndex(cellName2).row;\n\nexport const sameColumn = (cellName1, cellName2) =>\n  cellName1 &&\n  cellName2 &&\n  cellToIndex(cellName1).column === cellToIndex(cellName2).column;\n","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport Cell from './Cell';\nimport { indexToRow, indexToColumn, sameColumn, sameRow } from '../logic/cell';\n\nclass Sheet extends React.Component {\n  renderCells() {\n    return (\n      <table className=\"sheet-table\">\n        <thead style={{ textAlign: 'right' }}>\n          <tr>\n            <th className=\"column-header\"></th>\n            {this.props.cells[0].map((cell, i) => (\n              <th\n                key={`c${i}`}\n                className={`column-header ${\n                  sameColumn(this.props.selectedCell?.name, cell.getName())\n                    ? 'selected'\n                    : ''\n                }`}\n              >\n                <div>{indexToColumn(i)}</div>\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {this.props.cells.map((row, i) => (\n            <tr key={i}>\n              {row.map((cell, j) => (\n                <Fragment key={j}>\n                  {j === 0 ? (\n                    <th\n                      className={`row-header ${\n                        sameRow(this.props.selectedCell?.name, cell.getName())\n                          ? 'selected'\n                          : ''\n                      }`}\n                    >\n                      <div>{indexToRow(i)}</div>\n                    </th>\n                  ) : (\n                    <></>\n                  )}\n                  <td\n                    className={\n                      this.props.selectedCell?.name === cell.getName()\n                        ? 'selected'\n                        : ''\n                    }\n                  >\n                    <Cell name={cell.getName()} />\n                  </td>\n                </Fragment>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n\n  render() {\n    return <div>{this.renderCells()}</div>;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    cells: state.sheet.sheet.cells,\n    selectedCell: state.sheet.selectedCell,\n  };\n};\n\nexport default connect(mapStateToProps, {})(Sheet);\n","import { createBrowserHistory } from 'history';\nexport default createBrowserHistory();\n","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport Sheet from './Sheet';\nimport history from '../history';\n\nconst App = () => {\n  return (\n    <div>\n      <Router history={history}>\n        <Switch>\n          <Route path=\"/\" exact component={Sheet} />\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import { evaluate } from 'mathjs';\n\nexport const operators = /([+,*,/,=,\\-,(,)])/g;\n\nexport const pointedCells = formula => {\n  const presentCells = formula.split(operators).filter(e => isCell(e.trim()));\n  return [...new Set(presentCells)];\n};\n\nexport const isCell = value =>\n  !isNumber(value) && value !== '' && value !== '=' && !value.match(operators);\n\nexport const isNumber = value => !isNaN(value);\n\nexport const evaluateFormula = (formula, params) => {\n  return evaluate(formula, params);\n};\n","import { pointedCells, evaluateFormula } from './formula';\n\nclass Cell {\n  constructor({ sheet, formula = '0', value = '0' }) {\n    this.sheet = sheet;\n    this.formula = formula;\n    this.value = value;\n    this.listeners = new Set();\n    this.pointedCells = {};\n  }\n\n  setFormula(formula) {\n    this.formula = formula;\n    const cellNames = pointedCells(formula);\n    this.pointedCells = this.sheet.register(this, cellNames);\n    this.evaluate();\n  }\n\n  registerListener(cell) {\n    this.listeners.add(cell);\n  }\n\n  getName() {\n    return this.sheet.getCellName(this);\n  }\n\n  evaluate() {\n    if (this.formula.startsWith('=')) {\n      this.value = evaluateFormula(\n        this.formula.substring(1, this.formula.length),\n        this.pointedCellParams()\n      );\n    } else {\n      this.value = this.formula;\n    }\n\n    this.listeners.forEach(cell => cell.evaluate());\n  }\n\n  pointedCellParams() {\n    const map = {};\n    Object.keys(this.pointedCells).forEach(\n      cellName => (map[cellName] = this.pointedCells[cellName].value)\n    );\n    return map;\n  }\n}\n\nexport default Cell;\n","import {\n  UPDATE_CELL,\n  SELECT_CELL,\n  NEXT_COLUMN,\n  NEXT_ROW,\n  UPDATE_EDITING_CELL,\n} from '../actions/types';\nimport update from 'react-addons-update';\nimport Sheet from '../logic/Sheet';\n\nconst INITIAL_STATE = {\n  sheet: new Sheet({ rows: 9, columns: 26, name: 'Sheet 1' }),\n  selectedCell: undefined,\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case UPDATE_EDITING_CELL:\n      return update(state, {\n        selectedCell: {\n          tempFormula: { $set: action.payload.toUpperCase() },\n        },\n      });\n    case UPDATE_CELL:\n      const { cellName, formula } = action.payload;\n      /**\n       * I know! We're mutating the state inside the store here.\n       * This will be fixed as formula change tracking process is well defined.\n       * By now, we need this to have every cell value updated.\n       */\n      state.sheet.updateCell(cellName, formula);\n\n      return state;\n    case SELECT_CELL:\n      return {\n        ...state,\n        selectedCell: action.payload.selected\n          ? {\n              name: action.payload.name,\n              tempFormula: state.sheet.findCell(action.payload.name).formula,\n            }\n          : undefined,\n      };\n    case NEXT_COLUMN:\n      const nextColumnName = state.sheet.nextColumn(state.selectedCell.name);\n      const nextColumnFormula = state.sheet.findCell(nextColumnName).formula;\n      return {\n        ...state,\n        selectedCell: {\n          ...state.selectedCell,\n          name: nextColumnName,\n          tempFormula: nextColumnFormula,\n        },\n      };\n    case NEXT_ROW:\n      const nextRowName = state.sheet.nextRow(state.selectedCell.name);\n      const nextRowFormula = state.sheet.findCell(nextRowName).formula;\n      return {\n        ...state,\n        selectedCell: {\n          ...state.selectedCell,\n          name: nextRowName,\n          tempFormula: nextRowFormula,\n        },\n      };\n    default:\n      return state;\n  }\n};\n","import Cell from './Cell';\nimport { cellToIndex, indexToCell } from './cell';\n\nclass Sheet {\n  constructor({ rows, columns, name }) {\n    this.cellNames = new Map();\n    this.cells = this.createCells(rows, columns);\n    this.name = name;\n  }\n\n  register(pointingCell, pointedCellNames) {\n    pointedCellNames\n      .map(name => this.findCell(name))\n      .forEach(cell => cell.registerListener(pointingCell));\n    return this.cellMap(pointedCellNames);\n  }\n\n  cellMap(cellNames) {\n    const map = {};\n    cellNames.forEach(name => {\n      const cell = this.findCell(name);\n      map[name] = cell;\n    });\n    return map;\n  }\n\n  findCell(name) {\n    const index = cellToIndex(name);\n    return this.cells[index.row][index.column];\n  }\n\n  updateCell(name, formula) {\n    this.findCell(name).setFormula(formula);\n  }\n\n  createCells(rowCount, columnCount) {\n    let rows = [];\n    for (let i = 0; i < rowCount; i++) {\n      rows[i] = [];\n      for (let j = 0; j < columnCount; j++) {\n        const cell = new Cell({ sheet: this, formula: '', value: '' });\n        rows[i][j] = cell;\n        this.cellNames.set(cell, indexToCell(i, j));\n      }\n    }\n    return rows;\n  }\n\n  getCellName(cell) {\n    return this.cellNames.get(cell);\n  }\n\n  size() {\n    return { rows: this.rows(), columns: this.columns() };\n  }\n\n  rows() {\n    return this.cells.length;\n  }\n\n  columns() {\n    return this.cells[0].length;\n  }\n\n  nextRow(cellName) {\n    const cell = cellToIndex(cellName);\n    const nextRow = cell.row === this.rows() - 1 ? 0 : cell.row + 1;\n    return indexToCell(nextRow, cell.column);\n  }\n\n  nextColumn(cellName) {\n    const cell = cellToIndex(cellName);\n    const nextColumn = cell.column === this.columns() - 1 ? 0 : cell.column + 1;\n    return indexToCell(cell.row, nextColumn);\n  }\n}\n\nexport default Sheet;\n","import { combineReducers } from 'redux';\nimport sheetReducer from './sheetReducer';\n\nexport default combineReducers({\n  sheet: sheetReducer,\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport reducers from './reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(reduxThunk))\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}